#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#define MAX_SIZE 100

char stack[MAX_SIZE];
int top = -1;

void push(char data) {
  if (top == MAX_SIZE - 1) {
    printf("Error: Stack overflow\n");
    return;
  }
  stack[++top] = data;
}

void pop() {
  if (top == -1) {
    printf("Error: Stack underflow\n");
    return;
  }
  top--;
}

char peek() {
  if (top == -1) {
    printf("Error: Stack is empty\n");
    return ' ';
  }
  return stack[top];
}

int priority(char operator) {
  switch (operator) {
    case '(':
      return 0;
    case '+':
    case '-':
      return 1;
    case '*':
    case '/':
      return 2;
    case '^':
      return 3;
    default:
      return -1;
  }
}

void infixToPostfix(char* infix, char* postfix) {
  int i = 0, j = 0;
  while (infix[i] != '\0') {
    if (isdigit(infix[i])) {
      postfix[j++] = infix[i];
    } else if (infix[i] == '(') {
      push(infix[i]);
    } else if (infix[i] == ')') {
      while (peek() != '(') {
        postfix[j++] = peek();
        pop();
      }
      pop();
    } else {
      while (priority(peek()) >= priority(infix[i])) {
        postfix[j++] = peek();
        pop();
      }
      push(infix[i]);
    }
    i++;
  }
  while (top != -1) {
    postfix[j++] = peek();
    pop();
  }
  postfix[j] = '\0';
}

int main() {
  char infix[MAX_SIZE], postfix[MAX_SIZE];
  printf("Enter an infix expression: ");
  scanf("%s", infix);
  infixToPostfix(infix, postfix);
  printf("Postfix expression: %s\n", postfix);
  return 0;
}
